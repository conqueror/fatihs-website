#!/usr/bin/env node
/**
 * post-build.js
 * 
 * This script runs after the build to ensure proper static file generation
 * for routes that may not be properly generated by the adapter-static.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

console.log('ðŸ“„ Running post-build tasks...');

// Get directory name in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Define the build directory and important routes that need HTML files
const BUILD_DIR = path.join(__dirname, '..', 'build');
const SEARCH_DIR = path.join(BUILD_DIR, 'search');

// Ensure the search directory exists
if (!fs.existsSync(SEARCH_DIR)) {
  fs.mkdirSync(SEARCH_DIR, { recursive: true });
  console.log('Created /search directory');
}

// Find a working page to use as a template that's fully hydrated
const templatePath = path.join(BUILD_DIR, 'about', 'index.html');
if (!fs.existsSync(templatePath)) {
  console.error('Could not find template file to use');
  process.exit(1);
}

// Read the template file
let templateContent = fs.readFileSync(templatePath, 'utf8');

// Replace title and meta tags to make it a search page
templateContent = templateContent.replace(/<title>.*?<\/title>/g, '<title>Search - Fatih Nayebi</title>');
templateContent = templateContent.replace(
  /<meta name="description".*?>/g,
  '<meta name="description" content="Search across all content on Fatih Nayebi\'s website">'
);

// CRITICAL: Find all occurrences of node IDs in the template
// In the SvelteKit initialization code, we need to replace [0, 3] with [0, 22]
// The node ID 3 is for the About page, while 22 is for the Search page
templateContent = templateContent.replace(
  /node_ids: \[0, 3\]/g,
  'node_ids: [0, 22]'
);

// Add our script for handling search parameters from the URL
templateContent = templateContent.replace(
  '</head>',
  `  <script>
    // Check URL parameters and store them for hydration
    (function() {
      if (window.location.search && window.location.search.includes('query=')) {
        const params = new URLSearchParams(window.location.search);
        const query = params.get('query');
        const type = params.get('type') || 'all';
        
        // Store for client-side hydration
        sessionStorage.setItem('searchQuery', query);
        sessionStorage.setItem('searchType', type);
        
        // Log for debugging
        console.log('Search parameters stored:', { query, type });
      }
    })();
  </script>
</head>`
);

// Create the search/index.html file
fs.writeFileSync(path.join(SEARCH_DIR, 'index.html'), templateContent);
console.log('Created static file: /search/index.html');

// Also copy to search.html in the root for alternative access
fs.writeFileSync(path.join(BUILD_DIR, 'search.html'), templateContent);
console.log('Created static file: /search.html');

// Check and create /search/*.html files for various search queries if needed
// For example, we could pre-generate common search results

console.log('âœ… Post-build tasks completed successfully!'); 