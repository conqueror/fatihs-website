/**
 * Font download and optimization script
 * Downloads and prepares fonts for the website
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import https from 'https';
import { createWriteStream } from 'fs';

// Setup paths
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const fontsDir = path.join(__dirname, '../static/fonts');
const fontCssPath = path.join(__dirname, '../static/fonts/fonts.css');

console.log('Starting font download process...');

// Ensure fonts directory exists
if (!fs.existsSync(fontsDir)) {
  fs.mkdirSync(fontsDir, { recursive: true });
}

// Font configuration with display strategy
const fonts = [
  {
    family: 'Inter',
    weights: [400, 500, 600, 700],
    styles: ['normal', 'italic'],
    display: 'swap',    // Use 'swap' for better perceived performance
    preload: [400, 700] // Weights to preload (most common ones)
  },
  {
    family: 'Fira Code',
    weights: [400, 500, 700],
    styles: ['normal'],
    display: 'swap',
    preload: [400]      // Only preload regular weight for code
  }
];

// Helper function to download a font
async function downloadFont(url, outputPath) {
  return new Promise((resolve, reject) => {
    console.log(`Downloading ${url}...`);
    
    const file = createWriteStream(outputPath);
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to download font: ${response.statusCode}`));
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        console.log(`Downloaded ${outputPath}`);
        resolve();
      });
      
      file.on('error', (err) => {
        fs.unlink(outputPath, () => {}); // Delete the file on error
        reject(err);
      });
    }).on('error', (err) => {
      fs.unlink(outputPath, () => {}); // Delete the file on error
      reject(err);
    });
  });
}

// Generate CSS for all fonts
function generateFontCss() {
  let css = `/* Self-hosted fonts - generated by download-fonts.js */
/* Last generated: ${new Date().toISOString()} */

`;

  // Generate preload statements
  let preloadStatements = '';
  fonts.forEach(font => {
    const formattedFamily = font.family.toLowerCase().replace(/\s+/g, '-');
    
    font.weights.forEach(weight => {
      font.styles.forEach(style => {
        const styleStr = style === 'normal' ? '' : 'i';
        const filename = `${formattedFamily}-${weight}${styleStr}.woff2`;
        
        // Only add preload tags for critical fonts
        if (font.preload && font.preload.includes(weight) && style === 'normal') {
          preloadStatements += `<link rel="preload" href="/fonts/${filename}" as="font" type="font/woff2" crossorigin="anonymous" fetchpriority="high">\n`;
        }
      });
    });
  });

  // Font face declarations
  fonts.forEach(font => {
    font.weights.forEach(weight => {
      font.styles.forEach(style => {
        const styleStr = style === 'normal' ? '' : 'i';
        const filename = `${font.family.toLowerCase().replace(/\s+/g, '-')}-${weight}${styleStr}.woff2`;
        
        css += `@font-face {
  font-family: "${font.family}";
  font-weight: ${weight};
  font-style: ${style};
  font-display: ${font.display};
  src: url("/fonts/${filename}") format("woff2");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

`;
      });
    });
  });

  // Add base font definitions
  css += `/* Base font settings */
:root {
  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, system-ui, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  --font-mono: 'Fira Code', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;
}

body {
  font-family: var(--font-sans);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

code, pre, kbd {
  font-family: var(--font-mono);
}

/* Size-adjusted system fonts to prevent layout shift while loading */
@font-face {
  font-family: 'Inter Fallback';
  src: local(system-ui);
  size-adjust: 100%;
  ascent-override: 90%;
  descent-override: 25%;
  line-gap-override: 0%;
}

@font-face {
  font-family: 'Fira Code Fallback';
  src: local(monospace);
  size-adjust: 105%;
  ascent-override: 90%;
  descent-override: 25%;
  line-gap-override: 0%;
}

/* Apply fallbacks with these classes */
.fonts-loading body {
  font-family: 'Inter Fallback', system-ui, sans-serif;
}

.fonts-loading code, .fonts-loading pre, .fonts-loading kbd {
  font-family: 'Fira Code Fallback', monospace;
}
`;

  // Save CSS to file
  fs.writeFileSync(fontCssPath, css);
  console.log(`Generated CSS at ${fontCssPath}`);
  
  // Create FontPreload component
  const fontPreloadComponent = `<script>
  // This file is auto-generated by download-fonts.js
</script>

<svelte:head>
  <!-- Preload critical fonts -->
  ${preloadStatements}
  
  <!-- Font loading script -->
  <script>
    (function() {
      // Add loading class immediately
      document.documentElement.classList.add('fonts-loading');
      
      // Check if fonts are already cached
      if (localStorage.getItem('fonts-loaded')) {
        document.documentElement.classList.remove('fonts-loading');
        document.documentElement.classList.add('fonts-loaded');
      } else {
        // Use Font Loading API if available
        if ("fonts" in document) {
          Promise.all([
            document.fonts.load("1em Inter"),
            document.fonts.load("1em 'Fira Code'")
          ]).then(() => {
            document.documentElement.classList.remove('fonts-loading');
            document.documentElement.classList.add('fonts-loaded');
            localStorage.setItem('fonts-loaded', 'true');
          }).catch(() => {
            // If something goes wrong, still show content
            document.documentElement.classList.remove('fonts-loading');
          });
        } else {
          // Fallback for browsers without Font Loading API
          document.documentElement.classList.remove('fonts-loading');
        }
        
        // Failsafe - if fonts take too long, show content anyway
        setTimeout(function() {
          if (document.documentElement.classList.contains('fonts-loading')) {
            document.documentElement.classList.remove('fonts-loading');
          }
        }, 2000);
      }
    })();
  </script>
</svelte:head>
`;

  // Write the FontPreload component
  const fontPreloadPath = path.join(__dirname, '../src/lib/components/ui/FontPreload.svelte');
  fs.writeFileSync(fontPreloadPath, fontPreloadComponent);
  console.log(`Generated FontPreload component at ${fontPreloadPath}`);
  
  return { css, preloadStatements };
}

// Main function to download all fonts
async function downloadFonts() {
  try {
    // Font download config
    const fontPromises = [];
    
    // Process Inter font
    const interBaseUrl = 'https://fonts.gstatic.com/s/inter';
    const interFontUrls = [
      // Regular (400)
      {
        url: `${interBaseUrl}/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7.woff2`,
        path: path.join(fontsDir, 'inter-400.woff2'),
      },
      // Medium (500)
      {
        url: `${interBaseUrl}/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2JL7SUc.woff2`,
        path: path.join(fontsDir, 'inter-500.woff2'),
      },
      // Semi-bold (600)
      {
        url: `${interBaseUrl}/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa25L7SUc.woff2`,
        path: path.join(fontsDir, 'inter-600.woff2'),
      },
      // Bold (700)
      {
        url: `${interBaseUrl}/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa2pL7SUc.woff2`,
        path: path.join(fontsDir, 'inter-700.woff2'),
      },
      // Italic (400 italic)
      {
        url: `${interBaseUrl}/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7.woff2`,
        path: path.join(fontsDir, 'inter-400i.woff2'),
      },
    ];
    
    // Process Fira Code font
    const firaCodeBaseUrl = 'https://fonts.gstatic.com/s/firacode';
    const firaCodeFontUrls = [
      // Regular (400)
      {
        url: `${firaCodeBaseUrl}/v21/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_D1sJV37Nv7g.woff2`,
        path: path.join(fontsDir, 'fira-code-400.woff2'),
      },
      // Medium (500)
      {
        url: `${firaCodeBaseUrl}/v21/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_A9sJV37Nv7g.woff2`,
        path: path.join(fontsDir, 'fira-code-500.woff2'),
      },
      // Bold (700)
      {
        url: `${firaCodeBaseUrl}/v21/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_NprJV37Nv7g.woff2`,
        path: path.join(fontsDir, 'fira-code-700.woff2'),
      },
    ];
    
    // Add all font downloads
    [...interFontUrls, ...firaCodeFontUrls].forEach(font => {
      if (!fs.existsSync(font.path)) {
        fontPromises.push(downloadFont(font.url, font.path));
      } else {
        console.log(`Font already exists: ${font.path}`);
      }
    });
    
    // Wait for all fonts to download
    if (fontPromises.length > 0) {
      await Promise.all(fontPromises);
      console.log('All fonts downloaded successfully!');
    } else {
      console.log('All fonts already exist, no downloads needed.');
    }
    
    // Generate CSS file and components
    generateFontCss();
    
    return true;
  } catch (error) {
    console.error('Error downloading fonts:', error);
    return false;
  }
}

// Run the font download process
async function main() {
  try {
    const success = await downloadFonts();
    
    if (success) {
      console.log('Font processing completed successfully!');
    } else {
      console.error('Font processing completed with errors.');
      process.exit(1);
    }
  } catch (error) {
    console.error('Error in font processing:', error);
    process.exit(1);
  }
}

main(); 