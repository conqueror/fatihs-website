[
  {
    "slug": "syntax-highlighting-test",
    "data": {
      "title": "Testing Syntax Highlighting",
      "date": "2023-11-15",
      "excerpt": "A test post to verify that code syntax highlighting is working correctly.",
      "tags": [
        "Programming",
        "Web Development",
        "Testing"
      ],
      "author": "Fatih Nayebi",
      "featured": true
    },
    "content": "\n# Testing Syntax Highlighting\n\nThis is a test post to verify that code syntax highlighting is working correctly with our Shiki integration.\n\n## JavaScript Example\n\n```javascript\n// This is a JavaScript example\nfunction calculateFactorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * calculateFactorial(n - 1);\n}\n\n// Test the function\nconsole.log(calculateFactorial(5)); // Should output: 120\n```\n\n## Python Example\n\n```python\n# This is a Python example\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function\nprint([x for x in range(20) if is_prime(x)])  # Should output: [2, 3, 5, 7, 11, 13, 17, 19]\n```\n\n## HTML Example\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Syntax Highlighting Test</title>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        pre {\n            background-color: #f5f5f5;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n    </style>\n</head>\n<body>\n    <h1>Testing Code Blocks</h1>\n    <p>This is a test page for syntax highlighting.</p>\n    <div id=\"app\"></div>\n    <script>\n        document.getElementById('app').textContent = 'JavaScript is working!';\n    </script>\n</body>\n</html>\n```\n\n## CSS Example\n\n```css\n/* This is a CSS example */\n.container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem;\n}\n\n.card {\n    background-color: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    padding: 1.5rem;\n    transition: transform 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n}\n\n@media (max-width: 768px) {\n    .container {\n        padding: 1rem;\n    }\n    \n    .card {\n        padding: 1rem;\n    }\n}\n```\n\n## Svelte Example\n\n```svelte\n<script>\n  import { onMount } from 'svelte';\n  \n  export let name = 'World';\n  let count = 0;\n  \n  function increment() {\n    count += 1;\n  }\n  \n  onMount(() => {\n    console.log('Component mounted!');\n  });\n</script>\n\n<main>\n  <h1>Hello {name}!</h1>\n  <p>Visit the <a href=\"https://svelte.dev\">Svelte website</a> to learn how to build Svelte apps.</p>\n  \n  <button on:click={increment}>\n    Clicked {count} {count === 1 ? 'time' : 'times'}\n  </button>\n</main>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n```\n\n## Bash Example\n\n```bash\n#!/bin/bash\n# This is a Bash example\n\n# Define a function\nfunction backup_files() {\n  local source_dir=$1\n  local backup_dir=$2\n  local date_stamp=$(date +%Y-%m-%d-%H%M%S)\n  \n  echo \"Backing up files from $source_dir to $backup_dir/$date_stamp\"\n  \n  # Create backup directory if it doesn't exist\n  mkdir -p \"$backup_dir/$date_stamp\"\n  \n  # Copy files\n  cp -r \"$source_dir\"/* \"$backup_dir/$date_stamp\"\n  \n  echo \"Backup completed successfully!\"\n}\n\n# Call the function\nbackup_files \"/path/to/source\" \"/path/to/backups\"\n\n# Check exit status\nif [ $? -eq 0 ]; then\n  echo \"Backup script executed successfully\"\nelse\n  echo \"Backup failed with error code $?\"\nfi\n```\n\n## JSON Example\n\n```json\n{\n  \"name\": \"syntax-highlighting-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A demo of syntax highlighting capabilities\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"test\": \"jest\",\n    \"build\": \"webpack --mode production\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^27.0.6\",\n    \"webpack\": \"^5.44.0\",\n    \"webpack-cli\": \"^4.7.2\"\n  },\n  \"author\": \"Fatih Nayebi\",\n  \"license\": \"MIT\"\n}\n```\n\n## Conclusion\n\nIf syntax highlighting is working correctly, each of these code blocks should be properly highlighted with the Nord theme colors. The highlighting should make it easier to read and understand the code by visually distinguishing different syntax elements like keywords, strings, comments, and function names. ",
    "html": "<h1>Testing Syntax Highlighting</h1>\n<p>This is a test post to verify that code syntax highlighting is working correctly with our Shiki integration.</p>\n<h2>JavaScript Example</h2>\n<pre><code class=\"language-javascript\">// This is a JavaScript example\nfunction calculateFactorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * calculateFactorial(n - 1);\n}\n\n// Test the function\nconsole.log(calculateFactorial(5)); // Should output: 120\n</code></pre>\n<h2>Python Example</h2>\n<pre><code class=\"language-python\"># This is a Python example\ndef is_prime(n):\n    &quot;&quot;&quot;Check if a number is prime.&quot;&quot;&quot;\n    if n &lt;= 1:\n        return False\n    if n &lt;= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i &lt;= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function\nprint([x for x in range(20) if is_prime(x)])  # Should output: [2, 3, 5, 7, 11, 13, 17, 19]\n</code></pre>\n<h2>HTML Example</h2>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;Syntax Highlighting Test&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: &#39;Arial&#39;, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        pre {\n            background-color: #f5f5f5;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Testing Code Blocks&lt;/h1&gt;\n    &lt;p&gt;This is a test page for syntax highlighting.&lt;/p&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        document.getElementById(&#39;app&#39;).textContent = &#39;JavaScript is working!&#39;;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2>CSS Example</h2>\n<pre><code class=\"language-css\">/* This is a CSS example */\n.container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem;\n}\n\n.card {\n    background-color: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    padding: 1.5rem;\n    transition: transform 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n}\n\n@media (max-width: 768px) {\n    .container {\n        padding: 1rem;\n    }\n    \n    .card {\n        padding: 1rem;\n    }\n}\n</code></pre>\n<h2>Svelte Example</h2>\n<pre><code class=\"language-svelte\">&lt;script&gt;\n  import { onMount } from &#39;svelte&#39;;\n  \n  export let name = &#39;World&#39;;\n  let count = 0;\n  \n  function increment() {\n    count += 1;\n  }\n  \n  onMount(() =&gt; {\n    console.log(&#39;Component mounted!&#39;);\n  });\n&lt;/script&gt;\n\n&lt;main&gt;\n  &lt;h1&gt;Hello {name}!&lt;/h1&gt;\n  &lt;p&gt;Visit the &lt;a href=&quot;https://svelte.dev&quot;&gt;Svelte website&lt;/a&gt; to learn how to build Svelte apps.&lt;/p&gt;\n  \n  &lt;button on:click={increment}&gt;\n    Clicked {count} {count === 1 ? &#39;time&#39; : &#39;times&#39;}\n  &lt;/button&gt;\n&lt;/main&gt;\n\n&lt;style&gt;\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n&lt;/style&gt;\n</code></pre>\n<h2>Bash Example</h2>\n<pre><code class=\"language-bash\">#!/bin/bash\n# This is a Bash example\n\n# Define a function\nfunction backup_files() {\n  local source_dir=$1\n  local backup_dir=$2\n  local date_stamp=$(date +%Y-%m-%d-%H%M%S)\n  \n  echo &quot;Backing up files from $source_dir to $backup_dir/$date_stamp&quot;\n  \n  # Create backup directory if it doesn&#39;t exist\n  mkdir -p &quot;$backup_dir/$date_stamp&quot;\n  \n  # Copy files\n  cp -r &quot;$source_dir&quot;/* &quot;$backup_dir/$date_stamp&quot;\n  \n  echo &quot;Backup completed successfully!&quot;\n}\n\n# Call the function\nbackup_files &quot;/path/to/source&quot; &quot;/path/to/backups&quot;\n\n# Check exit status\nif [ $? -eq 0 ]; then\n  echo &quot;Backup script executed successfully&quot;\nelse\n  echo &quot;Backup failed with error code $?&quot;\nfi\n</code></pre>\n<h2>JSON Example</h2>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;syntax-highlighting-demo&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;A demo of syntax highlighting capabilities&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node index.js&quot;,\n    &quot;test&quot;: &quot;jest&quot;,\n    &quot;build&quot;: &quot;webpack --mode production&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.17.1&quot;,\n    &quot;react&quot;: &quot;^17.0.2&quot;,\n    &quot;react-dom&quot;: &quot;^17.0.2&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;jest&quot;: &quot;^27.0.6&quot;,\n    &quot;webpack&quot;: &quot;^5.44.0&quot;,\n    &quot;webpack-cli&quot;: &quot;^4.7.2&quot;\n  },\n  &quot;author&quot;: &quot;Fatih Nayebi&quot;,\n  &quot;license&quot;: &quot;MIT&quot;\n}\n</code></pre>\n<h2>Conclusion</h2>\n<p>If syntax highlighting is working correctly, each of these code blocks should be properly highlighted with the Nord theme colors. The highlighting should make it easier to read and understand the code by visually distinguishing different syntax elements like keywords, strings, comments, and function names. </p>\n"
  }
]